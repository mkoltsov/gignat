"use strict";
window.console = window.console || {};
window.console.log = window.console.log || function () {
};

(function () {

    var app = angular.module("routedPartials", ["ui.router",
        "ui.bootstrap",
        'gnt.dashboard',
        'gnt.logging',
        'gnt.common',
        'gnt.constants',
        'restangular',
        'infinite-scroll',
        'gnt.templates',
        'ngGrid',
        'nvd3ChartDirectives',
        'angularMoment',
        'toaster',
        'ngCookies',
        'http-auth-interceptor'
    ]);

    app.config(function ($stateProvider, $urlRouterProvider, $sceProvider, RestangularProvider, gntMainConstants, $locationProvider) {
        $locationProvider.hashPrefix('!');
        RestangularProvider.setBaseUrl(gntMainConstants.url);
        RestangularProvider.setRequestInterceptor(
            function (elem, operation, what) {
                console.log("the element we’re sending to the server:", elem);
                console.log("the HTTP method used:", operation);
                console.log("the model that’s being requested:", what);
                return elem;
            });

        //-----------------------UI-ROUTER CONFIGURATION------------------------------------------
        $urlRouterProvider.otherwise("/main/dashBoard");
        $stateProvider
            .state("main", {
                abtract: true,
                url: "/main",
                templateUrl: "components/main.html",
                controller: 'MainController'
            })
            .state("main.dashBoard", {
                url: "/dashBoard",
                templateUrl: "components/dashboard/db.tpl.html",
                controller: 'DashboardController'
            })
            .state("main.login", {
                url: "/login",
                templateUrl: "components/common/login.tpl.html",
                controller: LoginController
            })
            .state("main.notifications", {
                url: "/notifications",
                templateUrl: "components/notifications/notifications.tpl.html",
                controller: 'NotificationController'
            })
            .state("main.logging", {
                url: "/logging",
                templateUrl: "components/logging/lg.tpl.html",
                controller: 'LoggingController'
            });
    });

    app.controller("MainController", ['$rootScope', '$scope', '$log', '$state', '$modal', 'Restangular', 'gntMainConstants', '$location', 'toasterService',
            function ($rootScope, $scope, $log, $state, $modal, Restangular, gntMainConstants, $location, toasterService) {
                $rootScope.debugMode = gntMainConstants.debugMode;
                $scope.isActive = function (viewLocation) {
                    return viewLocation === $location.path();
                };
                $scope.navbarCollapsed = true;
                $scope.go = function (route) {
                    $state.go(route);
                };

                $scope.notifyCnt = function () {
                    return toasterService.getCnt();
                };

            }]
    );
    angular.module('gnt.dashboard', ['restangular']);
    angular.module('gnt.logging', []);
    angular.module('gnt.common', []);
    app.run(function ($rootScope, $location, $http, $cookieStore, $filter, authService, toasterService, gntMessages) {
        // Call when the 401 response is returned by the server
        $rootScope.$on('event:auth-loginRequired', function (rejection) {
            $rootScope.logout();
            $rootScope.loginMessage = gntMessages.PLEASE_LOG_IN;
            $location.path("/main/login");
        });

        // Call when the 403 response is returned by the server
        $rootScope.$on('event:auth-notAuthorized', function (rejection) {
            toasterService.error('errors.403');
        });

        // Call when the user logs out
        $rootScope.$on('event:auth-loginCancelled', function () {
            $location.path("/main/login");
        });

        // Call when the client is confirmed
        $rootScope.$on('event:auth-loginConfirmed', function (data) {
            $rootScope.authenticated = true;
            delete $rootScope.loginMessage;
        });

        $rootScope.timeNow = function () {
            return $filter('date')(new Date(), 'HH:mm:ss');
        };

        $rootScope.logout = function () {
            delete $rootScope.user;
            $http.get('app/logout');
            $rootScope.authenticated = false;
            authService.loginCancelled();
            $cookieStore.remove('user');
        };

        /* Try getting valid user from cookie or go to login page */
        var originalPath = $location.path();
        $location.path("/main/login");
        var authToken = $cookieStore.get('user');
        if (authToken !== undefined) {
            $rootScope.user = {name: authToken};
            $rootScope.authenticated = true;

            //try to get user profile, or redirect him to profile selection page
            //$rootScope.profileUserCheck();
            $location.path(originalPath);
        }
    });
}());

function LoginController($scope, $rootScope, $location, $cookieStore, $http, toasterService, authService, gntMessages) {
    $http.get('/test/getsid')
        .success(function (data) {
            $scope.dbName = data;
        }).error(function (data) {
            $scope.dbName = 'ANY';
            $rootScope.loginMessage = 'The application is not connected to the database';
        });
    $scope.login = function () {
        var data = "j_username=" + encodeURIComponent($scope.username) + "&j_password=" + encodeURIComponent($scope.password) + "&submit=Login";
        $http.post('security/user/authenticate', data, {
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            ignoreAuthModule: 'ignoreAuthModule'
        }).success(function (data, status, headers, config) {
            $rootScope.user = {name: $scope.username};
            authService.loginConfirmed();
            $cookieStore.put('user', $scope.username);
            $location.path("/main/dashBoard");

        }).error(function (data, status, headers, config) {
            $rootScope.authenticated = false;
            toasterService.error(gntMessages.INVALID_CREDENTIALS);
        });
    };
}

;"use strict";

angular.module('gnt.common')
    .controller('GenericModalCtrl', ['$scope', '$rootScope', '$modalInstance', 'gntModelService', 'toasterService',

        function ($scope, $rootScope, $modalInstance, gntModelService, toasterService) {

            $scope.cancel = function () {
                $modalInstance.dismiss('Canceled');
            };

            $scope.save = function () {
                gntModelService.setData($rootScope.appPart, $scope.modelPart, $scope.key).val($scope.data);

                gntModelService.getData($rootScope.appPart, $scope.modelPart).then(function (data) {
                    toasterService.success(data);
                });
                $modalInstance.close('Modal closed');
            };
        }
    ]);
;"use strict";
angular.module('gnt.common')
    .controller('ModalCtrl', ['$scope', '$modal', '$log', function ($scope, $modal, $log) {
        $scope.open = function (templateName, controller) {
            var modalInstance = $modal.open({
                templateUrl: templateName,
                controller: controller,
                windowClass: 'app-modal-window'
            });

            modalInstance.result.then(function (selectedItem) {
                $scope.selected = selectedItem;
            }, function () {
                $log.info('Modal dismissed at: ' + new Date());
            });
        };
    }]);;/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */
"use strict";
angular
    .module('gnt.common')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};/**
 * Widget Body Directive
 */
"use strict";
angular
    .module('gnt.common')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '@?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};/**
 * Widget Footer Directive
 */
"use strict";
angular
    .module('gnt.common')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};/**
 * Widget Header Directive
 *
 */
"use strict";
angular
    .module('gnt.common')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><i class="fa" ng-class="icon"></i> {{title}} <div class="pull-right" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};/**
 * Widget Directive
 */
"use strict";
angular
    .module('gnt.common')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};"use strict";
angular.module('gnt.common')
    .service('gntModelService', ['Restangular', '$rootScope', '$q', '$timeout', 'gntMainConstants', 'toasterService', 'amMoment',
        function (Restangular, $rootScope, $q, $timeout, gntMainConstants, toasterService, amMoment) {
            var model = {
                db: {},
                lg: {}
            };

            this.getData = function (appPart, modelPart, key) {
                var promise = $q.defer();
                $timeout(function () {
                    resolveModel(promise, modelPart, key);
                }, 0);

                return promise.promise;
            };

            var resolveModel = function (promise, modelPart, key) {
                //if we don't have a particular key it's ok to retrieve the whole part of the model
                switch (modelPart) {
                    case 'data':
                    {
                        if (!model.db[modelPart]) {
                            //someDataService.getData($rootScope.someID).then(function (data) {
                            //    model.db[modelPart] = data;
                            //    if (!data) {
                            //        model.db[modelPart] = {};
                            //    }
                            //    promise.resolve(model.db[modelPart]);
                            //});
                        } else {
                            promise.resolve(model.db[modelPart]);
                        }
                    }
                        break;
                }
            };

            var enrichCbModel = function (part) {
                if (_.isDate(part.date)) {
                    part.date = amMoment.preprocessDate(part.date).format(gntMainConstants.dateFormat);
                }
                return part;
            };

            this.postData = function (appPart, modelPart) {
                var promise = $q.defer();
                var modelToSend = gntMainConstants.modelToSend.db;
                var model1 = _(enrichCbModel(model[appPart][modelPart]))
                    .pick(model[appPart][modelPart],
                    _.union(modelToSend))
                    .value();
                //Restangular.one('endPointToSaveData').one(modelPart, someID).all('validationPoint').post(model1).then(function (data) {
                //    promise.resolve(data);
                //}, function (data) {
                //    promise.reject(data);
                //});
                return promise.promise;
            };

            this.setData = function (appPart, modelPart, key) {
                console.log(appPart, modelPart, key);
                return {
                    val: function (data) {
                        if (!model[appPart][modelPart]) {
                            model[appPart][modelPart] = {};
                            model[appPart][modelPart][key] = data;
                        } else {
                            model[appPart][modelPart][key] = data;
                        }
                    }
                };
            };

            this.clearData = function (appPart, modelPart) {
                if (!appPart && !modelPart) {
                    model = {
                        db: {},
                        lg: {}
                    };
                } else {
                    delete model[appPart][modelPart];
                }
            };
        }
    ]);;"use strict";
angular.module('gnt.common')
    .service('toasterService', function (toaster, amMoment) {
        var messageCache = {
            error: null,
            success: null,
            warning: null
        };
        var messageHistory = [];
        var cnt = 0;
        var notifyUser = function (text, it) {
            var notificationType = _.keys(messageCache)[it];

            function capitalize(string) {
                return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
            }

            function notify(text) {
                messageHistory.push({
                    type: notificationType, text: text,
                    date: amMoment.preprocessDate(new Date()).format('DD/MM HH:mm:ss')
                });
                cnt++;
                toaster.pop(notificationType, capitalize(notificationType), text);
            }

            notify(text);
        };

        this.error = function (text) {
            notifyUser(text, 0);
        };

        this.success = function (text) {
            notifyUser(text, 1);
        };

        this.warning = function (text) {
            notifyUser(text, 2);
        };

        this.getHistory = function () {
            return _.cloneDeep(messageHistory);
        };

        this.getCnt = function () {
            return cnt;
        };

        this.clearCnt = function () {
            cnt = 0;
        };
    });;"use strict";

angular.module('gnt.constants', [])
    .constant('gntMainConstants',
    {url: '/api/v1/',
        debugMode: false,
        dateFormat: 'DD/MM/YYYY',
        modelToEnrich: [],
        modelToSend: {db: ['newClient'
        ],
            lg: []},
        timepickerDateFormat: {
            initDate: new Date(),
            minDate: new Date('1970-01-01'),
            format: 'dd/MM/yyyy',
            opened: false,
            dateOptions: {
                formatYear: 'yy',
                startingDay: 1
            },
            value: ''
        }
    });
;"use strict";
angular.module('gnt.dashboard')
    .controller('DashboardController', ['$rootScope', '$scope', 'dashBoardDataService',
        'gntMainConstants', '$controller', 'toasterService',
        function ($rootScope, $scope, dashBoardDataService, gntMainConstants, $controller, toasterService) {
            $controller('ModalCtrl', {$scope: $scope});
            $scope.userData = {selectedCompany: ''};
            $scope.chartData = [];
            $scope.filterOptions = {
                filterText: ''
            };

            $scope.showChart = function (company) {
                dashBoardDataService.getChartData(company).then(function (data) {
                    if (!_.isEmpty(data)) {
                        $scope.chartData = [
                            {
                                "key": company + " sales series",
                                "values": data.map(function (elem) {
                                    return [elem.POINTA, elem.POINTB];
                                })
                            }];
                    }
                    else {
                        toasterService.warning("There's no sales data for " + company);
                    }
                });
            };

            $scope.showAssets = function (company) {
                $scope.showChart(company);
                $scope.userData.selectedCompany = _.find($scope.clients, function (chr) {
                    return chr.COMPANY === company;
                });
                dashBoardDataService.getAssets(company).then(function (data) {
                    $scope.myData = data;
                });
            };

            $scope.gridOptions = {
                data: 'myData',
                columnDefs: [
                    {field: 'ASSET', displayName: 'Asset'}, {field: 'CNT', displayName: 'Amount'}
                ],
                filterOptions: $scope.filterOptions
            };

            dashBoardDataService.getClients().then(function (data) {
                $scope.clients = data;
            });

            dashBoardDataService.getDashboardData($rootScope.user.name).then(function (data) {
                $scope.dashboardControls = data;
            });

        }
    ]);;"use strict";
angular.module('gnt.dashboard')
    .controller('ServerManagementController', ['$scope', '$rootScope', '$modalInstance', '$controller',
        function ($scope, $rootScope, $modalInstance, $controller) {
            $controller('GenericModalCtrl', {$scope: $scope, $modalInstance: $modalInstance});
            $rootScope.appPart = 'db';
            $scope.modelPart = 'data';
            $scope.key = 'newClient';
            $scope.data = {};
            $scope.modalName = 'Adding a new client';
            $scope.firstButtonName = 'Cancel';
            $scope.secondButtonName = 'Save';
        }]);;"use strict";
angular.module('gnt.dashboard')
    .service('dashBoardDataService', ['Restangular',
        function (Restangular) {
            var cbRest = Restangular.one('dashboard');

            this.getChartData = function (profile) {
                return cbRest.one('clients').getList(profile, {chart: true});
            };

            this.getAssets = function (profile) {
                return cbRest.one('clients').getList(profile, {assets: true});
            };

            this.getAssets = function (profile) {
                return cbRest.one('clients').getList(profile, {assets: true});
            };

            this.getClients = function () {
                return cbRest.one('clients').getList();
            };

            this.getDashboardData = function (user) {
                return cbRest.one('data', user).getList();
            };

        }
    ]);;"use strict";
angular.module('gnt.logging')
    .controller('LoggingController', ['$rootScope', '$scope', '$controller', 'gntMainConstants', 'clientDataService',
        function ($rootScope, $scope, $controller, gntMainConstants, clientDataService) {
            $scope.clients = [];
            var busy = false;
            var last = 1;

            $scope.loadMore = function () {
                if (busy === true) {
                    return;
                }
                busy = true;
                clientDataService.getAssets(last).then(function (data) {
                    last = data[data.length - 1].ID;
                    busy = false;
                    $scope.clients = _.union($scope.clients, data);
                });
            };

            $scope.icon = function (name) {
                return /Bank/.test(name) ? "fa-bank" : "fa-briefcase";
            };
        }
    ]);;"use strict";
angular.module('gnt.logging')
    .service('clientDataService', ['Restangular',
        function (Restangular) {
            var cbRest = Restangular.one('dashboard');
            this.getAssets = function (id) {
                return cbRest.one('clients').getList(id, {data: true});
            };
        }
    ]);;"use strict";

angular.module('gnt.constants')
    .constant('gntMessages',
    {
        UNKNOWN_STATUS:"Unknown status",
        PLEASE_LOG_IN:"Please log in to proceed",
        INVALID_CREDENTIALS:'Your credentials are not valid'
    });
;"use strict";
function NotificationController($scope, toasterService) {
    $scope.notifications = toasterService.getHistory();
    toasterService.clearCnt();
}

